---
- name: Docker
  ansible.builtin.import_role: { name: docker }
  vars: { docker_users: ["{{ syncthing_owner }}"] }

- name: Create storage directories
  ansible.builtin.file: { path: "{{ the_path }}", state: directory, mode: "{{ omit }}" }
  vars:     # noqa: jinja[spacing]
    storage_dirs: "{{ []
        + [{'path': syncthing_conf_dir, 'owner': syncthing_owner}]
        + (syncthing_data_volumes | default([], true) | map('split', ':') | map('first'))
      }}"
    the_path: "{{ item.path | default(item) }}"
    the_owner: "{{ item.owner | default(syncthing_user) }}"
  loop_control: {label: "{{ the_owner }}:{{ the_path }}"}
  loop: "{{ storage_dirs }}"
  register: syncthing_dirs_create_info    # syncthing_dirs_create_info.results[ix].path
  become: true
  become_user: "{{ the_owner }}"

- name: Compose
  become: true
  become_user: "{{ syncthing_owner }}"
  # noqa: jinja[spacing]
  vars:
    compose_dir: "{{ syncthing_compose_dir | default(bookshelf_const_compose_dir + '/syncthing', true) }}"
    conf_dir_abs: "{{ syncthing_dirs_create_info.results[0].path }}"
    data_dirs_abs: "{{ syncthing_dirs_create_info.results[1:] | map(attribute='path') }}"
    data_volumes_abs: "{{ data_dirs_abs | zip(
        syncthing_data_volumes | default([], true) | map('regex_replace', '^[^:]*:', '')
      ) | map('join', ':') }}"
    service_state: "{{ syncthing_enabled | ternary('present', 'absent') }}"
    the_user: "{{ getent_passwd[syncthing_user] }}"
    user_uid: "{{ the_user.1 }}"
    user_gid: "{{ the_user.2 }}"
  block:
    - name: Create compose directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0700'
      loop: ["{{ compose_dir }}", "{{ conf_dir_abs }}/config"]

    - name: Create compose files
      ansible.builtin.template:
        src: "{{ item }}.j2"
        dest: "{{ compose_dir }}/{{ item }}"
        mode: '0600'
      loop:
        - serve.json    # <- Must be first
        - compose.yaml
        - main.env
        - secret.env
      register: syncthing_compose_files_result

    - name: Ensure service user directories ownership
      ansible.builtin.file:
        path: "{{ item }}"
        owner: "{{ user_uid }}"
        group: "{{ user_gid }}"
      loop: "{{ data_dirs_abs + [conf_dir_abs + '/config'] }}"
      become: true
      become_user: root

    - name: Apply service state
      community.docker.docker_compose_v2:
        project_src: "{{ compose_dir }}"
        state: "{{ service_state }}"
        remove_orphans: true
      register: syncthing_service_state

    - name: Restart service
      community.docker.docker_compose_v2:
        project_src: "{{ compose_dir }}"
        state: restarted
        remove_orphans: true
      when:
        - syncthing_enabled and not syncthing_service_state.changed
        - syncthing_tailscaled and syncthing_compose_files_result.results[0].changed

    - name: Create note
      ansible.builtin.import_role: { name: bookshelf-note }
      # noqa: var-naming[no-role-prefix]
      vars: { src: notes.md.j2, dest: syncthing-service.md, present: "{{ syncthing_enabled }}" }

- name: Mark done
  ansible.builtin.set_fact:
    syncthing_done: true
