---
# *_managed vars denote whether ansible takes care of the application or not.
#   `X_managed: false` application will still fire if it is in `Y_managed: true`
#   application dependencies
#
# *_enabled vars denote whether the application is enabled or not. Unlike
#   X_managed it disables the application when `X_enabled: false`

###
### Server connection configuration
###
# Don't keep passwords in plain text, encrypt them. One option would be:
#   ansible-vault encrypt_string -J PASSWORD_PLACEHOLDER
ansible_user: ansible-guy   # <- Not required for ssh-key-based connection
ansible_password: changeme  # <- Not required for ssh-key-based connection
ansible_become_password: changeme

# All before this ROLES_CONF_TS4LE64m91 marker stays
# unchanged by sample-vars.sh script
#################### {{ ROLES_CONF_TS4LE64m91 }} ####################



########################
###       BASE       ###
########################

# ================
#       BASH
# ================
bash_managed: false
bash_completion: false

# ==================
#       DOCKER
# ==================
# docker_users:   # <- Existing users to be added to docker group
#   - "{{ ansible_user | default(ansible_user_id) }}"
docker_managed: false
docker_users:

# =================
#       ENVAR
# =================
# Installs envar for bash
# -----
# envar_users:  # <- Existing users to have access to envar
#   - "{{ ansible_user | default(ansible_user_id) }}"
#   - root
envar_managed: false
envar_users:

# ===============
#       FZF
# ===============
# Versions: https://github.com/junegunn/fzf/releases
# fzf_version better leave as is or change to a specific version
# -----
# fzf_users:  # <- Existing users to have access to fzf
#   - "{{ ansible_user_id }}"
#   - root
fzf_managed: false
fzf_version: "{{ bookshelf_const_version.fzf }}"
fzf_users:

# ===============
#       GIT
# ===============
# git_extraconf:
#   - owner: "{{ ansible_user_id }}"    # <- Required, must be unique
#     template: gitconfig.extra.ini.j2  # <- Required. No full path for the ones defined in the role
#     # Optional variables, can be addressed in the template via 'conf' map
#     user_name: Foo            # <- 'conf.user_name' in the template
#     user_email: foo@bar.baz
#   - owner: another-user
#     template: "{{ playbook_dir }}/resources/git/extra.ini.j2" # <- Full path for ones out of the role directory
#     # ...
git_managed: false
git_extraconf:

# ================
#       HTOP
# ================
htop_managed: false

# ===================
#       PS1-GIT
# ===================
# Installs fancy PS1 with git PS1 suffix support. Loaded with envar.
# Doesn't require git
# -----
# ps1_git_users:  # <- Existing users to have this PS1
#   - "{{ ansible_user | default(ansible_user_id) }}"
#   - root
ps1_git_managed: false
ps1_git_users:

# ===================
#       SENSORS
# ===================
sensors_managed: false

# =================
#       SNAPD
# =================
# Not supported by Alpine
# -----
# snapd_managed: "{{ not factum_os_family in ['alpine'] }}"   # <- All hosts but Alpines
# -----
snapd_managed: false

# ================
#       TMUX
# ================
# tmux_sane_users:   # <- Existing users to source my preferred configuration
#   - "{{ ansible_user_id }}"
tmux_managed: false
tmux_sane_users:

# =================
#       TMUXP
# =================
# Not supported by Alpine
# -----
# tmuxp_managed: "{{ not factum_os_family in ['alpine'] }}"   # <- All hosts but Alpines
# -----
# tmuxp_conf:
#   - owner: "{{ ansible_user_id }}"
#     conf:
#         # Also available: triple.yaml.j2, quad.yaml.j2
#       - template: sensors.yaml.j2   # <- Required. No full path for the ones defined in the role
#         name: my-sensors            # <- Required. Will land in ~/.tmuxp/my-sensors.yaml
#         # Optional variables, can be addressed in the template via 'conf' map
#         session_name: Foo           # <- 'conf.session_name' in the template
#         window_name: bar
#       - template: "{{ playbook_dir }}/resources/tmuxp/demo1.yaml.j2"  # <- Full path for ones out of the role directory
#         ...
#   - owner: ...
#     ...
tmuxp_managed: false
tmuxp_conf:

# ====================
#       TOOLBELT
# ====================
# * tar
# * nano, neovim, vim   (editors)
# * curl, wget          (downloaders)
# -----
# toolbelt_pick:    # <- Install only a fraction, or empty to install all
#   - nano          # <- curl will be installed
#   - downloaders   # <- All downloaders will be installed
#   - tar           # <- tar will be installed
toolbelt_managed: false
toolbelt_pick:



###########################
###       SERVICE       ###
###########################

# ===============================
#       NGINX-PROXY-MANAGER
# ===============================
# Versions:
# * https://hub.docker.com/r/jc21/nginx-proxy-manager/tags
# -----
# # Optional path to extra configuration .env.j2 file
# nginx_proxy_manager_extra_envfile: "{{ playbook_dir }}/resources/npm/extra.env.j2"
nginx_proxy_manager_managed: false
nginx_proxy_manager_enabled: false
nginx_proxy_manager_version: "{{ bookshelf_const_version.nginx_proxy_manager }}"
nginx_proxy_manager_owner: "{{ ansible_user | default(ansible_user_id) }}"
nginx_proxy_manager_conf_dir: ~/conf/nginx-proxy-manager
# nginx_proxy_manager_compose_dir: ~/docker/nginx-proxy-manager # <- Better leave automanaged, or uncomment and edit
nginx_proxy_manager_service_name: nginx-proxy-manager
nginx_proxy_manager_hostname: "{{ nginx_proxy_manager_service_name }}"
nginx_proxy_manager_vhost: "{{ nginx_proxy_manager_service_name }}.domain.local"
nginx_proxy_manager_extra_envfile:

# =======================
#       NGINX-PROXY
# =======================
# Versions:
# * https://hub.docker.com/r/jwilder/nginx-proxy/tags?name=alpine
# Exposes:
# * nginx_proxy_net - proxy network name
# -----
nginx_proxy_managed: false
nginx_proxy_enabled: false
nginx_proxy_version: "{{ bookshelf_const_version.nginx_proxy }}"
nginx_proxy_owner: "{{ ansible_user | default(ansible_user_id) }}"
# nginx_proxy_compose_dir: ~/docker/nginx-proxy # <- Better leave automanaged, or uncomment and edit
nginx_proxy_service_name: nginx-proxy
nginx_proxy_hostname: "{{ nginx_proxy_service_name }}"
nginx_proxy_http_port: 80



###########################
###       DESKTOP       ###
###########################

# ====================
#       AUDACITY
# ====================
audacity_managed: false

# =================
#       COPYQ
# =================
# For platforms different from ubuntu probably better flatpak
# copyq_install_method - pm (package manager) or flatpak
# -----
# copyq_users:  # <- Existing users to have copyq autostarted
#   - "{{ ansible_user | default(ansible_user_id) }}"
copyq_managed: false
copyq_install_method: pm
copyq_users:

# ===================
#       FLATPAK
# ===================
# flatpak_repos:  # <- These are all supported repos
#   - flathub
flatpak_managed: false
flatpak_repos:

# ====================
#       PHPSTORM
# ====================
phpstorm_managed: false

# ===================
#       SUBLIME
# ===================
sublime_managed: false
sublime_merge: false

# =================
#       TEAMS
# =================
# teams_users:  # <- Existing users to have teams autostarted
#   - "{{ ansible_user | default(ansible_user_id) }}"
teams_managed: false
teams_users:

# =================
#       VIBER
# =================
# Currently only Debian-based platforms supported
# -----
# viber_users:  # <- Existing users to have viber autostarted
#   - "{{ ansible_user | default(ansible_user_id) }}"
viber_managed: false
viber_users:

# ===============
#       VLC
# ===============
vlc_managed: false

# ==================
#       VSCODE
# ==================
vscode_managed: false
