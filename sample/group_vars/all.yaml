---
# *_managed vars denote whether ansible takes care of the application or not.
#   `X_managed: false` application will still fire if it is in `Y_managed: true`
#   application dependencies
#
# *_enabled vars denote whether the application is enabled or not. Unlike
#   X_managed it disables the application when `X_enabled: false`

###
### Server connection configuration
###
# Don't keep passwords in plain text, encrypt them. One option would be:
#   ansible-vault encrypt_string -J PASSWORD_PLACEHOLDER
ansible_user: ansible-guy   # <- Not required for ssh-key-based connection
ansible_password: changeme  # <- Not required for ssh-key-based connection
ansible_become_password: changeme

# All before this ROLES_CONF_TS4LE64m91 marker stays
# unchanged by sample-vars.sh script
#################### {{ ROLES_CONF_TS4LE64m91 }} ####################



########################
###       BASE       ###
########################

# ===============
#       AGE
# ===============
# Simple, modern and secure file encryption tool.
#   https://github.com/FiloSottile/age
# -----
# VERSIONS: https://github.com/FiloSottile/age/releases
# -----
age_managed: false
age_version:    # Leave blank to leverage bookshelf configuration

# ================
#       BASH
# ================
# bash_users:   # <- Existing users to use bash by default
#   - "{{ ansible_user_id }}"
bash_managed: false
bash_completion: false
bash_users:

# ============================
#       DOCKER-LOGROTATE
# ============================
# -----
# Unlike most of services gets installed in the system (not container).
# -----
# docker_logrotate_managed: "{{ docker_managed | default(false) }}"  # <- When docker installed
docker_logrotate_managed: false
docker_logrotate_keep_count: 7

# ==================
#       DOCKER
# ==================
# docker_users:   # <- Existing users to be added to docker group
#   - "{{ ansible_user_id }}"
docker_managed: false
docker_users:

# =================
#       ENVAR
# =================
# Installs envar for bash
# -----
# envar_users:  # <- Existing users to have access to envar
#   - "{{ ansible_user_id }}"
#   - root
envar_managed: false
envar_users:

# ===============
#       FZF
# ===============
# General-purpose command-line fuzzy finder.
#   https://github.com/junegunn/fzf
# -----
# Versions: https://github.com/junegunn/fzf/releases
# -----
# fzf_users:  # <- Existing users to have access to fzf
#   - "{{ ansible_user_id }}"
#   - root
fzf_managed: false
fzf_version:    # Leave blank to leverage bookshelf configuration
fzf_users:

# ===============
#       GIT
# ===============
# git_extraconf:
#   - owner: "{{ ansible_user_id }}"    # <- Required, must be unique
#     template: gitconfig.extra.ini.j2  # <- Required. No full path for the ones defined in the role
#     # Optional variables, can be addressed in the template via 'conf' map
#     user_name: Foo            # <- 'conf.user_name' in the template
#     user_email: foo@bar.baz
#   - owner: another-user
#     template: "{{ playbook_dir }}/resources/git/extra.ini.j2" # <- Full path for ones out of the role directory
#     # ...
git_managed: false
git_extraconf:

# ===================
#       PS1-GIT
# ===================
# Installs fancy PS1 with git PS1 suffix support. Loaded with envar.
# Doesn't require git
# -----
# ps1_git_users:  # <- Existing users to have this PS1
#   - "{{ ansible_user_id }}"
#   - root
ps1_git_managed: false
ps1_git_users:

# =================
#       SNAPD
# =================
# snapd_managed: "{{ factum_os_like in ['ubuntu'] }}"   # <- Only supported by Ubuntu like
# -----
snapd_managed: false

# ============================
#       TAILSCALE-CLIENT
# ============================
# Tailscale makes creating software-defined networks easy: securely connecting
# users, services, and devices.
#   https://tailscale.com/
# -----
tailscale_client_managed: false

# ================
#       TMUX
# ================
# tmux_sane_users:   # <- Existing users to source my preferred configuration
#   - "{{ ansible_user_id }}"
tmux_managed: false
tmux_sane_users:

# =================
#       TMUXP
# =================
# Not supported by Alpine
# -----
# tmuxp_managed: "{{ factum_os_family not in ['alpine'] }}"   # <- All hosts but Alpines
# -----
# tmuxp_conf:
#   - owner: "{{ ansible_user_id }}"
#     conf:
#         # See all available in templates/
#       - template: sensors.yaml.j2   # <- Required. No full path for the ones defined in the role
#         name: my-sensors            # <- Required. Will land in ~/.tmuxp/my-sensors.yaml
#         # Optional variables, can be addressed in the template via 'conf' map
#         session_name: Foo           # <- 'conf.session_name' in the template
#         window_name: bar
#       - template: "{{ playbook_dir }}/resources/tmuxp/demo1.yaml.j2"  # <- Full path for ones out of the role directory
#         ...
#   - owner: ...
#     ...
tmuxp_managed: false
tmuxp_conf:

# ====================
#       TOOLBELT
# ====================
# Contains very basic and often needed tools that for most often usage don't
# require any additional configuration. Some of the tools are categorized and
# the categories can be used to install the whole set of underlying tools.
# -----
# * downloaders:  curl, wget
# * editors:      nano, neovim, vim
# * viewers:      bat, glow
# * htop, jq, sensors, skate, speedtest, tar, wishlist
# -----
# * bat       : cat on steroids (https://github.com/sharkdp/bat)
# * glow      : Markdown reader (https://github.com/charmbracelet/glow), for
#               Alpine it's force excluded, as not supported yet.
#               TODO: add it to Alpine when supported
# * skate     : A personal key-value store (https://github.com/charmbracelet/skate)
# * wishlist  : The SSH directory (https://github.com/charmbracelet/wishlist).
#               Disabled for Alpine, as it's not available in its repo
# -----
# toolbelt_pick:    # <- Install only a fraction. Leave empty to install all
#   - nano            # <- nano will be installed
#   - downloaders     # <- All downloaders will be installed
#   - tar             # <- tar will be installed
# toolbelt_exclude: # <- Opposed to toolbelt_pick, higher priority than toolbelt_pick
#   - wget            # <- In conjunction with toolbelt_pick above, only curl will be installed
#   - editors         # <- Dispite toolbelt_pick above, nano will not be installed
toolbelt_managed: false
toolbelt_pick:
toolbelt_exclude:

# ========================
#       VIRT-MANAGER
# ========================
# Virtual Machine Manager
# -----
# Only supports Debian family hosts
# -----
# virt_manager_managed: "{{ factum_os_family in ['debian'] }}"
# virt_manager_users:   # <- Existing users to be added to libvirt group
#   - "{{ ansible_user_id }}"
virt_manager_managed: false
virt_manager_users:



###########################
###       SERVICE       ###
###########################

# ===================
#       ADGUARD
# ===================
# The worldâ€™s most advanced ad blocker!
#   https://adguard.com/en/adguard-home/overview.html
# -----
# Versions:
# * https://hub.docker.com/r/adguard/adguardhome/tags
# * https://hub.docker.com/r/tailscale/tailscale/tags
# -----
adguard_managed: false
adguard_enabled: false
adguard_version:        # Leave blank to leverage bookshelf configuration
adguard_compose_dir:    # Unless you know ..., leave blank to leverage bookshelf configuration
adguard_owner: "{{ ansible_user_id }}"
adguard_conf_dir: ~/conf/adguard
adguard_service_name: adguard
adguard_hostname: "{{ adguard_service_name }}"
adguard_vhost: "{{ adguard_service_name }}.domain.local"
adguard_web_ui_port:    # Leave blank to leverage bookshelf configuration
adguard_init_ui_port:   # Leave blank to leverage bookshelf configuration
adguard_tz: "{{ ansible_date_time.tz | default('UTC') }}"
# Optional path to extra configuration .env.j2 file, will affect both adguard
# and tailscale. Ex.: "{{ playbook_dir }}/resources/adguard/extra.env.j2"
adguard_extra_envfile:
# ----------
# The following settings configure Adguard to run as a part of tailnet. This
# allows to configure adguard for a tailnet DNS server under
# https://tailscale.com/admin/dns -> Nameservers
#
# IMPORTANT 1: See IMPORTANTs in tailscale service description
#
# NOTE 1: Local network is not accessible within tailnet, which means that if i
# create an adguard DNS rewrite for 'my-site.local' to '192.168.0.20', the site
# will not be reachable in the tailnet. SOLUTION: deploy another tailscale
# service with "advertised routes" (https://tailscale.com/kb/1019/subnets)
adguard_tailscaled: false
adguard_tailscale_version:    # Leave blank to leverage bookshelf configuration
# Hostname within tailnet
adguard_tailscale_ts_hostname: "{{ adguard_service_name }}-tailscale"
adguard_tailscale_auth_key:

# ==========================
#       AUDIOBOOKSHELF
# ==========================
# Self-hosted audiobook and podcast server
#   https://www.audiobookshelf.org/
# -----
# Versions:
# * https://hub.docker.com/r/advplyr/audiobookshelf/tags
# -----
audiobookshelf_managed: false
audiobookshelf_enabled: false
audiobookshelf_version:       # Leave blank to leverage bookshelf configuration
audiobookshelf_compose_dir:   # Unless you know ..., leave blank to leverage bookshelf configuration
audiobookshelf_owner: "{{ ansible_user_id }}"
audiobookshelf_conf_dir: ~/conf/audiobookshelf
audiobookshelf_data_dir:         # (REQUIRED)
audiobookshelf_service_name: audiobookshelf
audiobookshelf_hostname: "{{ audiobookshelf_service_name }}"
audiobookshelf_vhost: "{{ audiobookshelf_service_name }}.domain.local"
audiobookshelf_web_ui_port:    # Leave blank to leverage bookshelf configuration
audiobookshelf_tz: "{{ ansible_date_time.tz | default('UTC') }}"
# Optional path to extra configuration .env.j2 file, will affect both audiobookshelf
# and tailscale. Ex.: "{{ playbook_dir }}/resources/audiobookshelf/extra.env.j2"
audiobookshelf_extra_envfile:
# ----------
# The following settings configure Audiobookshelf to run as a part of tailnet
#
# IMPORTANT 1: See IMPORTANTs in tailscale service description
audiobookshelf_tailscaled: false
audiobookshelf_tailscale_version:   # Leave blank to leverage bookshelf configuration
# Hostname within tailnet
audiobookshelf_tailscale_ts_hostname: "{{ audiobookshelf_service_name }}-tailscale"
audiobookshelf_tailscale_auth_key:

# =======================
#       CODE-SERVER
# =======================
# VS Code in the browser
#   https://coder.com/docs/code-server
# -----
# Unlike most of services gets installed in the system (not container).
# Not supported by Alpine.
# -----
# code_server_managed: "{{ factum_os_family not in ['alpine'] }}"   # <- No Alpine support
# code_server_extensions:   # <- List of extension
#   - editorconfig.editorconfig
#   - mads-hartmann.bash-ide-vscode
#   - timonwong.shellcheck
#   - foxundermoon.shell-format
#   - redhat.ansible
# -----
# Versions:
# * https://github.com/coder/code-server/releases
code_server_managed: false
code_server_version:      # Leave blank to leverage bookshelf configuration
code_server_owner: "{{ ansible_user_id }}"
code_server_web_ui_port:  # Leave blank to leverage bookshelf configuration
code_server_pass: changeme
code_server_extensions:
# If defined, takes precedence over 'code_server_pass'.
# Generate with (replace PASS with your value):
#   printf -- '%s' 'PASS' | docker container run -i --rm alpine /bin/sh -c 'apk add --update --no-cache argon2 openssl && argon2 "$(openssl rand -base64 8)" -e'
code_server_hashed_pass:
# Custom config file template. See the default one in templates/
# code_server_custom_conf: "{{ playbook_dir }}/resources/code-server.config.yaml.j2"
code_server_custom_conf:
# Custom user config file template, applied only on the service initialization.
# See the default one in templates/
# code_server_user_conf: "{{ playbook_dir }}/resources/code-server.user-conf.json.j2"
code_server_user_conf:

# =======================
#       FILEBROWSER
# =======================
# Web File Browser
#   https://filebrowser.org/
# ALTERNATIVE (when time comes);
#   https://github.com/gtsteffaniak/filebrowser
# -----
# Versions:
# * https://hub.docker.com/r/filebrowser/filebrowser/tags?name=-s6
# * https://hub.docker.com/r/tailscale/tailscale/tags
# -----
# NOTE 1: Temporary password for the admin user will be printed to the container
# log on startup
# -----
filebrowser_managed: false
filebrowser_enabled: false
filebrowser_version:        # Leave blank to leverage bookshelf configuration
filebrowser_compose_dir:    # Unless you know ..., leave blank to leverage bookshelf configuration
filebrowser_owner: "{{ ansible_user_id }}"
filebrowser_conf_dir: ~/conf/filebrowser
filebrowser_data_dir:       # (REQUIRED)
filebrowser_service_name: filebrowser
filebrowser_hostname: "{{ filebrowser_service_name }}"
filebrowser_vhost: "{{ filebrowser_service_name }}.domain.local"
filebrowser_web_ui_port:    # Leave blank to leverage bookshelf configuration
filebrowser_tz: "{{ ansible_date_time.tz | default('UTC') }}"
# Optional path to extra configuration .env.j2 file, will affect both filebrowser
# and tailscale. Ex.: "{{ playbook_dir }}/resources/filebrowser/extra.env.j2"
filebrowser_extra_envfile:
# ----------
# The following settings configure FileBrowser to run as a part of tailnet
#
# IMPORTANT 1: See IMPORTANTs in tailscale service description
filebrowser_tailscaled: false
filebrowser_tailscale_version:    # Leave blank to leverage bookshelf configuration
# Hostname within tailnet
filebrowser_tailscale_ts_hostname: "{{ filebrowser_service_name }}-tailscale"
filebrowser_tailscale_auth_key:

# ==================
#       GOTIFY
# ==================
# A simple server for sending and receiving messages
#   https://gotify.net/
# -----
# Versions:
# * https://hub.docker.com/r/gotify/server/tags
# -----
gotify_managed: false
gotify_enabled: false
gotify_version:       # Leave blank to leverage bookshelf configuration
gotify_compose_dir:   # Unless you know ..., leave blank to leverage bookshelf configuration
gotify_owner: "{{ ansible_user_id }}"
gotify_conf_dir: ~/conf/gotify
gotify_service_name: gotify
gotify_hostname: "{{ gotify_service_name }}"
gotify_vhost: "{{ gotify_service_name }}.domain.local"
gotify_web_ui_port:   # Leave blank to leverage bookshelf configuration
gotify_tz: "{{ ansible_date_time.tz | default('UTC') }}"

# ====================
#       HEIMDALL
# ====================
# Application Dashboard
#   https://heimdall.site/
# -----
# Versions:
# * https://hub.docker.com/r/linuxserver/heimdall/tags
# -----
heimdall_managed: false
heimdall_enabled: false
heimdall_version:       # Leave blank to leverage bookshelf configuration
heimdall_compose_dir:   # Unless you know ..., leave blank to leverage bookshelf configuration
heimdall_owner: "{{ ansible_user_id }}"
heimdall_conf_dir: ~/conf/heimdall
heimdall_service_name: heimdall
heimdall_hostname: "{{ heimdall_service_name }}"
heimdall_vhost: "{{ heimdall_service_name }}.domain.local"
heimdall_web_ui_port:   # Leave blank to leverage bookshelf configuration
heimdall_tz: "{{ ansible_date_time.tz | default('UTC') }}"

# ====================
#       JELLYFIN
# ====================
# The Free Software Media System
#   https://jellyfin.org/
# -----
# Versions:
# * https://hub.docker.com/r/linuxserver/jellyfin/tags
# -----
jellyfin_managed: false
jellyfin_enabled: false
jellyfin_version:       # Leave blank to leverage bookshelf configuration
jellyfin_compose_dir:   # Unless you know ..., leave blank to leverage bookshelf configuration
jellyfin_owner: "{{ ansible_user_id }}"
jellyfin_conf_dir: ~/conf/jellyfin
jellyfin_data_dir:      # (REQUIRED) Directory with media files
jellyfin_service_name: jellyfin
jellyfin_hostname: "{{ jellyfin_service_name }}"
jellyfin_vhost: "{{ jellyfin_service_name }}.domain.local"
jellyfin_web_ui_port:   # Leave blank to leverage bookshelf configuration
jellyfin_tz: "{{ ansible_date_time.tz | default('UTC') }}"
# Optional path to extra configuration .env.j2 file
# Ex.: "{{ playbook_dir }}/resources/jellyfin/extra.env.j2"
jellyfin_extra_envfile:
# ----------
# The following settings configure Jellyfin to run as a part of tailnet
#
# IMPORTANT 1: See IMPORTANTs in tailscale service description
jellyfin_tailscaled: false
jellyfin_tailscale_version:    # Leave blank to leverage bookshelf configuration
# Hostname within tailnet
jellyfin_tailscale_ts_hostname: "{{ jellyfin_service_name }}-tailscale"
jellyfin_tailscale_auth_key:

# =========================
#       JOPLIN-SERVER
# =========================
# Open source note-taking app. Capture your thoughts and securely access them from any device.
#   https://joplinapp.org/
# -----
# Versions:
# * https://hub.docker.com/r/joplin/server/tags
# * https://hub.docker.com/_/postgres/tags?name=alpine
# -----
joplin_server_managed: false
joplin_server_enabled: false
joplin_server_version:              # Leave blank to leverage bookshelf configuration
joplin_server_postgres_version:     # Leave blank to leverage bookshelf configuration
joplin_server_compose_dir:          # Unless you know ..., leave blank to leverage bookshelf configuration
joplin_server_owner: "{{ ansible_user_id }}"
joplin_server_conf_dir: ~/conf/joplin-server
joplin_server_service_name: joplin-server
joplin_server_hostname: "{{ joplin_server_service_name }}"
joplin_server_vhost: "{{ joplin_server_service_name }}.domain.local"
joplin_server_web_ui_port:          # Leave blank to leverage bookshelf configuration
# Joplin base url. Ex.:
#   https://{{ joplin_server_vhost }}
#   http://{{ ansible_default_ipv4.address }}:{{ joplin_server_web_ui_port | default(bookshelf_const_port.joplin_server.web_ui, true) }}
joplin_server_base_url:             # (REQUIRED)
joplin_server_db_pass:              # (REQUIRED)
joplin_server_tz: "{{ ansible_date_time.tz | default('UTC') }}"

# ==================
#       METUBE
# ==================
# Self-hosted YouTube downloader (web UI for youtube-dl / yt-dlp)
#   https://github.com/alexta69/metube
# -----
# Versions:
# * https://github.com/alexta69/metube/pkgs/container/metube
# -----
metube_managed: false
metube_enabled: false
metube_version:       # Leave blank to leverage bookshelf configuration
metube_compose_dir:   # Unless you know ..., leave blank to leverage bookshelf configuration
metube_owner: "{{ ansible_user_id }}"
metube_conf_dir: ~/conf/metube
metube_data_dir:      # (REQUIRED) Directory with media files
metube_service_name: metube
metube_hostname: "{{ metube_service_name }}"
metube_vhost: "{{ metube_service_name }}.domain.local"
metube_web_ui_port:   # Leave blank to leverage bookshelf configuration
metube_tz: "{{ ansible_date_time.tz | default('UTC') }}"
# https://github.com/alexta69/metube?tab=readme-ov-file#configuration-via-environment-variables
# Optional path to extra configuration .env.j2 file
# Ex.: "{{ playbook_dir }}/resources/metube/extra.env.j2"
metube_extra_envfile:

# ===============================
#       NGINX-PROXY-MANAGER
# ===============================
# Docker container for managing Nginx proxy hosts with a simple, powerful interface
#   https://nginxproxymanager.com/
# -----
# Versions:
# * https://hub.docker.com/r/jc21/nginx-proxy-manager/tags
# -----
# # Optional path to extra configuration .env.j2 file
# nginx_proxy_manager_extra_envfile: "{{ playbook_dir }}/resources/npm/extra.env.j2"
nginx_proxy_manager_managed: false
nginx_proxy_manager_enabled: false
nginx_proxy_manager_version:        # Leave blank to leverage bookshelf configuration
nginx_proxy_manager_compose_dir:    # Unless you know ..., leave blank to leverage bookshelf configuration
nginx_proxy_manager_owner: "{{ ansible_user_id }}"
nginx_proxy_manager_conf_dir: ~/conf/nginx-proxy-manager
nginx_proxy_manager_service_name: nginx-proxy-manager
nginx_proxy_manager_hostname: "{{ nginx_proxy_manager_service_name }}"
nginx_proxy_manager_vhost: "{{ nginx_proxy_manager_service_name }}.domain.local"
nginx_proxy_manager_extra_envfile:

# =======================
#       NGINX-PROXY
# =======================
# Automated nginx proxy for Docker containers using docker-gen
#   https://github.com/nginx-proxy/nginx-proxy
# -----
# Versions:
# * https://hub.docker.com/r/jwilder/nginx-proxy/tags?name=alpine
# Exposes:
# * nginx_proxy_net - proxy network name
# * nginx_proxy_enabled - Used by other services
# -----
# # With nginx_proxy_manager_enabled == true ports 80 and 443 are busy
# nginx_proxy_http_port:  "{{ (nginx_proxy_manager_enabled | default(false)) | ternary(9080, 80) }}"
# nginx_proxy_https_port: "{{ (nginx_proxy_manager_enabled | default(false)) | ternary(9443, 443) }}"
# -----
nginx_proxy_managed: false
nginx_proxy_enabled: false
nginx_proxy_version:        # Leave blank to leverage bookshelf configuration
nginx_proxy_compose_dir:    # Unless you know ..., leave blank to leverage bookshelf configuration
nginx_proxy_owner: "{{ ansible_user_id }}"
nginx_proxy_service_name: nginx-proxy
nginx_proxy_hostname: "{{ nginx_proxy_service_name }}"
nginx_proxy_http_port:      # Ex.: '80', no HTTP when empty. In conjunction with NPM use '9080'
nginx_proxy_https_port:     # Ex.: '443', no HTTPS when empty
nginx_proxy_certs_dir:      # Path to certs on the managed machine. Works paired with HTTPS

# ====================
#       OLIVETIN
# ====================
# Safe and simple access to predefined shell commands from a web interface.
#   https://olivetin.app/
#   https://docs.olivetin.app/
# -----
# Versions:
# * https://hub.docker.com/r/jamesread/olivetin/tags
# -----
olivetin_managed: false
olivetin_enabled: false
olivetin_version:       # Leave blank to leverage bookshelf configuration
olivetin_compose_dir:   # Unless you know ..., leave blank to leverage bookshelf configuration
olivetin_owner: "{{ ansible_user_id }}"
olivetin_conf_dir: ~/conf/olivetin
olivetin_service_name: olivetin
olivetin_hostname: "{{ olivetin_service_name }}"
olivetin_vhost: "{{ olivetin_service_name }}.domain.local"
olivetin_web_ui_port:   # Leave blank to leverage bookshelf configuration
# Scripts to be uploaded to "{{ olivetin_compose_dir }}/scripts" directory
# with the same filename (excluding '*.j2' templates extension). They'll
# be '0755' and the scripts directory will be read only mounted to the
# container '/app/scripts' directory
# olivetin_scripts:
#   - "{{ playbook_dir }}/resources/olivetin/script1.sh"    # <- Treated as normal file
#   - "{{ playbook_dir }}/resources/olivetin/script2.sh.j2" # <- Treated as template
olivetin_scripts:
# Extra mounts, can be useful to access docker host resources
# olivetin_volumes: ['~:/app/home:ro', '/etc:/app/etc:ro']
olivetin_volumes:
# Custom config file template. See the default one in templates/
# olivetin_config: "{{ playbook_dir }}/resources/olivetin.yaml.j2"
olivetin_config:

# ===========================
#       PORTAINER-AGENT
# ===========================
# The Portainer agent.
#   https://www.portainer.io/
# -----
# Versions:
# * https://hub.docker.com/r/portainer/agent/tags?name=alpine
# -----
portainer_agent_managed: false
portainer_agent_enabled: false
portainer_agent_version:        # Leave blank to leverage bookshelf configuration
portainer_agent_compose_dir:    # Unless you know ..., leave blank to leverage bookshelf configuration
portainer_agent_owner: "{{ ansible_user_id }}"
portainer_agent_service_name: portainer-agent
portainer_agent_hostname: "{{ portainer_service_name }}"
portainer_agent_host_management: false
portainer_agent_tcp_port:       # Leave blank to leverage bookshelf configuration

# =====================
#       PORTAINER
# =====================
# A universal container management platform.
#   https://www.portainer.io/
# -----
# Versions:
# * https://hub.docker.com/r/portainer/portainer-ce/tags?name=alpine
# -----
portainer_managed: false
portainer_enabled: false
portainer_version:        # Leave blank to leverage bookshelf configuration
portainer_compose_dir:    # Unless you know ..., leave blank to leverage bookshelf configuration
portainer_owner: "{{ ansible_user_id }}"
portainer_conf_dir: ~/conf/portainer
portainer_service_name: portainer
portainer_hostname: "{{ portainer_service_name }}"
portainer_vhost: "{{ portainer_service_name }}.domain.local"
portainer_web_ui_port:    # Leave blank to leverage bookshelf configuration
# Publish ssh tunnel server port
portainer_agent_ready: false

# =======================
#       QBITTORRENT
# =======================
# Free and reliable P2P Bittorrent client
#   https://www.qbittorrent.org/
#   https://hub.docker.com/r/linuxserver/qbittorrent
# -----
# Versions:
# * https://hub.docker.com/r/linuxserver/qbittorrent/tags?name=-ls
# * https://github.com/VueTorrent/VueTorrent/pkgs/container/vuetorrent-lsio-mod/versions
# -----
# NOTE 1: Temporary password for the admin user will be printed to the container
# log on startup
#
# NOTE 2: Switch to alternative UI
#   Settings > WebUI > check Use alternative WebUI, Files location: /vuetorrent
qbittorrent_managed: false
qbittorrent_enabled: false
qbittorrent_version:              # Leave blank to leverage bookshelf configuration
qbittorrent_vuetorrent_version:   # Leave blank to leverage bookshelf configuration
qbittorrent_compose_dir:          # Unless you know ..., leave blank to leverage bookshelf configuration
qbittorrent_owner: "{{ ansible_user_id }}"
qbittorrent_conf_dir: ~/conf/qbittorrent
qbittorrent_data_dir:             # (REQUIRED) Torrent downloads directory
qbittorrent_service_name: qbittorrent
qbittorrent_hostname: "{{ qbittorrent_service_name }}"
qbittorrent_vhost: "{{ qbittorrent_service_name }}.domain.local"
qbittorrent_web_ui_port:          # Leave blank to leverage bookshelf configuration
qbittorrent_tz: "{{ ansible_date_time.tz | default('UTC') }}"
# Optional. Will be available in the container in
#   /scripts/downloaded.sh (0700)
#   /scripts/downloaded.secret.sh (0600)
# Configure in qBittorrent UI -> Settings -> Downloads -> External ... on finished
# For demo scripts see:
#   templates/gotify-push.*
#   templates/discord-push.*
# Ex.: "{{ playbook_dir }}/resources/qbittorrent/downloaded.sh.j2"
qbittorrent_downloaded_script:
# Optional, can be used in conjunction with qbittorrent_downloaded_script to keep
# secrets separately from .
# Will only be used when qbittorrent_downloaded_script is set
# Ex.: "{{ playbook_dir }}/resources/qbittorrent/downloaded.secret.sh.j2"
qbittorrent_downloaded_secret_file:
# Optional path to extra configuration .env.j2 file
# Ex.: "{{ playbook_dir }}/resources/qbittorrent/extra.env.j2"
qbittorrent_extra_envfile:

# =====================
#       SYNCTHING
# =====================
# Open Source Continuous File Synchronization
#   https://syncthing.net/
# -----
# Versions:
# * https://hub.docker.com/r/linuxserver/syncthing/tags?name=-ls
# -----
syncthing_managed: false
syncthing_enabled: false
syncthing_version:              # Leave blank to leverage bookshelf configuration
syncthing_compose_dir:          # Unless you know ..., leave blank to leverage bookshelf configuration
syncthing_owner: "{{ ansible_user_id }}"
syncthing_conf_dir: ~/conf/syncthing
syncthing_data_dir:             # (REQUIRED)
syncthing_service_name: syncthing
syncthing_hostname: "{{ syncthing_service_name }}"
syncthing_vhost: "{{ syncthing_service_name }}.domain.local"
syncthing_web_ui_port:          # Leave blank to leverage bookshelf configuration
syncthing_tz: "{{ ansible_date_time.tz | default('UTC') }}"
# ----------
# The following settings configure Syncthing to run as a part of tailnet
#
# IMPORTANT 1: See IMPORTANTs in tailscale service description
syncthing_tailscaled: false
syncthing_tailscale_version:    # Leave blank to leverage bookshelf configuration
# Hostname within tailnet
syncthing_tailscale_ts_hostname: "{{ syncthing_service_name }}-tailscale"
syncthing_tailscale_auth_key:

# =====================
#       TAILSCALE
# =====================
# Tailscale makes creating software-defined networks easy: securely connecting
# users, services, and devices.
#   https://tailscale.com/
# -----
# Versions:
# * https://hub.docker.com/r/tailscale/tailscale/tags
# -----
# Meant for tailscale server configuration: https://tailscale.com/kb/1352/servers
#
# IMPORTANT 1: Auth key is required for initial container run:
# https://tailscale.com/admin/settings/keys -> 'Generate auth key...'
#   -> generate single time or reusable
#
# IMPORTANT 2: After deployment https://tailscale.com/admin/machines -> 3 dots
# next to the machine -> Disable key expiry (to avoid re-login to tailscale)
#
# IMPORTANT 3: With changed routes or exit node params service requires a valid
# auth key, i.e. if it's one-timer new one must be provided
#
# IMPORTANT 4: With version update also update auth key (see IMPORTANT 1)
#
# NOTE 1: The service is useless unless it's configured for exit node or subnet
# router. Both need to be confirmed in the machines admin
tailscale_managed: false
tailscale_enabled: false
tailscale_version:          # Leave blank to leverage bookshelf configuration
tailscale_compose_dir:      # Unless you know ..., leave blank to leverage bookshelf configuration
tailscale_owner: "{{ ansible_user_id }}"
tailscale_conf_dir: ~/conf/tailscale
tailscale_service_name: tailscale
tailscale_hostname: "{{ tailscale_service_name }}"
# Hostname within tailnet
tailscale_ts_hostname: "{{ tailscale_service_name }}"
tailscale_auth_key:         # (REQUIRED)
# Ex.: '192.168.0.0/24,192.168.2.0/24'
tailscale_routes:
tailscale_exit_node: false  # Advertise exit node
# Optional path to extra configuration .env.j2 file
# Ex.: "{{ playbook_dir }}/resources/tailscale/extra.env.j2"
tailscale_extra_envfile:

# ====================
#       TWINGATE
# ====================
# It's time to ditch your VPN
#   https://www.twingate.com/
# -----
# Versions:
# * https://hub.docker.com/r/twingate/connector/tags
# -----
twingate_managed: false
twingate_enabled: false
twingate_version:         # Leave blank to leverage bookshelf configuration
twingate_compose_dir:     # Unless you know ..., leave blank to leverage bookshelf configuration
twingate_owner: "{{ ansible_user_id }}"
twingate_service_name: twingate
twingate_hostname: "{{ twingate_service_name }}"
twingate_tenant_name:     # (REQUIRED) Your twingate network name
# https://<tenant>.twingate.com/networks/overview -> 'Deploy ... Connector'
#   -> 'Docker' -> 'Generate Tokens'
twingate_access_token:    # (REQUIRED)
twingate_refresh_token:   # (REQUIRED)
# Optional path to extra configuration .env.j2 file
# Ex.: "{{ playbook_dir }}/resources/twingate/extra.env.j2"
twingate_extra_envfile:

# =======================
#       VAULTWARDEN
# =======================
# The community driven password manager.
#   https://www.vaultwarden.net/
# -----
# Versions:
# * https://hub.docker.com/r/vaultwarden/server/tags?name=alpine
# Options description:
# * https://github.com/dani-garcia/vaultwarden/blob/main/.env.template
# -----
vaultwarden_managed: false
vaultwarden_enabled: false
vaultwarden_version:        # Leave blank to leverage bookshelf configuration
vaultwarden_compose_dir:    # Unless you know ..., leave blank to leverage bookshelf configuration
vaultwarden_owner: "{{ ansible_user_id }}"
vaultwarden_conf_dir: ~/conf/vaultwarden
vaultwarden_service_name: vaultwarden
vaultwarden_hostname: "{{ vaultwarden_service_name }}"
vaultwarden_vhost: "{{ vaultwarden_service_name }}.domain.local"
# Required with https via reverse proxy, vaultwarden needs to know it's https
# to work properly with attachments.
# https://github.com/dani-garcia/vaultwarden/wiki/Using-Docker-Compose
# Ex.: https://{{ vaultwarden_vhost }}
vaultwarden_vdomain:
# Access token for http(s)://VAULTWARDEN_HOST/admin
# Generate with:
#   docker container run -it --rm vaultwarden/server:latest /vaultwarden hash
vaultwarden_admin_token_hash:
vaultwarden_web_ui_port:    # Leave blank to leverage bookshelf configuration
vaultwarden_tz: "{{ ansible_date_time.tz | default('UTC') }}"
# Optional path to extra configuration .env.j2 file
# Ex.: "{{ playbook_dir }}/resources/vaultwarden/extra.env.j2"
vaultwarden_extra_envfile:

# ===================
#       WG-EASY
# ===================
# The easiest way to run WireGuard VPN + Web-based Admin UI.
#   https://github.com/wg-easy/wg-easy
# -----
# Versions:
# * https://github.com/wg-easy/wg-easy/pkgs/container/wg-easy/versions?filters%5Bversion_type%5D=tagged
# Options description:
# * https://github.com/wg-easy/wg-easy/tree/production?tab=readme-ov-file#options
# * https://github.com/wg-easy/wg-easy/blob/production/How_to_generate_an_bcrypt_hash.md
# -----
wg_easy_managed: false
wg_easy_enabled: false
wg_easy_version:        # Leave blank to leverage bookshelf configuration
wg_easy_compose_dir:    # Unless you know ..., leave blank to leverage bookshelf configuration
wg_easy_owner: "{{ ansible_user_id }}"
wg_easy_conf_dir: ~/conf/wg-easy
wg_easy_service_name: wg-easy
wg_easy_hostname: "{{ wg_easy_service_name }}"
wg_easy_vhost: "{{ wg_easy_service_name }}.domain.local"
# Defaults to defined in WG-Easy. Ex.: '8.4.4.8,10.0.0.1'
wg_easy_dns:
# Defaults to no-pass login. See options description for how to generate
wg_easy_pass_hash:
# Ex.: 'my-vpn-server.public-domain.com' or '112.2.84.234'
wg_easy_host:           # (REQUIRED)
wg_easy_web_ui_port:    # Leave blank to leverage bookshelf configuration
wg_easy_udp_port: 51820
# Optional path to extra configuration .env.j2 file
# Ex.: "{{ playbook_dir }}/resources/wg-easy/extra.env.j2"
wg_easy_extra_envfile:



###########################
###       DESKTOP       ###
###########################

# ====================
#       AUDACITY
# ====================
# Free Audio editor, recorder, music making and more!
#   https://www.audacityteam.org/
# -----
audacity_managed: false
# Supported values in prefered order (due to GUI oriented usage):
# * flatpak   # <- Forced for non-Ubuntu-like
# * snap
audacity_install_method: flatpak

# =================
#       BRAVE
# =================
# The browser that puts you first. Block ads. Save data. And get way faster
# webpages. Just by switching your browser.
#   https://brave.com/
# -----
brave_managed: false
# Supported values in prefered order (due to GUI oriented usage):
# * flatpak   # <- Forced for non-Ubuntu-like
# * snap
brave_install_method: flatpak

# ==================
#       CHROME
# ==================
# Official web browser from Google, built to be fast, secure, and customizable.
#   https://www.google.com/chrome/
# -----
chrome_managed: false

# =================
#       COPYQ
# =================
# Advanced clipboard manager with editing and scripting features.
#   https://hluk.github.io/CopyQ/
# -----
# copyq_users:  # <- Existing users to have copyq autostarted
#   - "{{ ansible_user_id }}"
copyq_managed: false
# Supported values in prefered order (due to GUI oriented usage):
# * pm
# * flatpak   # <- Forced for non-Ubuntu-like
copyq_install_method: pm
copyq_users:

# ===================
#       DBEAVER
# ===================
# Universal Database Tool.
#   https://dbeaver.io/
# -----
dbeaver_managed: false
# Supported values in prefered order (due to GUI oriented usage):
# * flatpak   # <- Forced for non-Ubuntu-like
# * snap
dbeaver_install_method: flatpak

# ===================
#       FLATPAK
# ===================
# flatpak_repos:  # <- These are all supported repos
#   - flathub
flatpak_managed: false
flatpak_repos:

# ================
#       GIMP
# ================
# GNU Image Manipulation Program
#   https://www.gimp.org/
# -----
gimp_managed: false
# Supported values in prefered order (due to GUI oriented usage):
# * flatpak   # <- Forced for non-Ubuntu-like
# * snap
gimp_install_method: flatpak

# ======================
#       INPUT-LEAP
# ======================
# Open-source KVM software (Barrier fork)
#   https://github.com/input-leap/input-leap
# -----
# input_leap_users:  # <- Existing users to have InputLeap autostarted
#   - "{{ ansible_user_id }}"
input_leap_managed: false
input_leap_users:

# =========================
#       INTELLIJ-IDEA
# =========================
# The IDE for Java and Kotlin
#   https://www.jetbrains.com/idea/
# -----
intellij_idea_managed: false
# Ultimate edition, unless community
intellij_idea_ultimate: false
# Supported values in prefered order (due to available CLI interface):
# * snap
# * flatpak   # <- Forced for non-Ubuntu-like
intellij_idea_install_method: snap

# ==========================
#       JOPLIN-DESKTOP
# ==========================
# Open source note-taking app. Capture your thoughts and securely access them from any device.
#   https://joplinapp.org/
# -----
joplin_desktop_managed: false
# Supported values in prefered order (due newer versions in snap):
# * snap
# * flatpak   # <- Forced for non-Ubuntu-like
joplin_desktop_install_method: snap

# ====================
#       KDENLIVE
# ====================
# FOS Video Editor.
#   https://kdenlive.org/
# -----
kdenlive_managed: false
# Supported values in prefered order (due to GUI oriented usage):
# * flatpak   # <- Forced for non-Ubuntu-like
# * snap
kdenlive_install_method: flatpak

# ======================
#       MKVTOOLNIX
# ======================
# Ultimate Tool for Editing and Merging MKV Files.
#   https://mkvtoolnix.org/
# -----
mkvtoolnix_managed: false
# Supported values in prefered order (due to available CLI interface):
# * pm
# * flatpak   # <- Forced for non-Debian like
mkvtoolnix_install_method: pm

# ====================
#       NXPLAYER
# ====================
# NoMachine client.
#   https://www.nomachine.com/
# -----
nxplayer_managed: false

# ======================
#       OBS-STUDIO
# ======================
# Free and open source software for video recording and live streaming.
#   https://obsproject.com/
# -----
obs_studio_managed: false
# Supported values in prefered order (due to GUI oriented usage):
# * pm
# * flatpak   # <- Forced for non-Ubuntu-like
# * snap
obs_studio_install_method: pm

# =================
#       OPERA
# =================
# Experience faster, distraction-free browsing with Ad blocking, and browse privately.
#   https://www.opera.com/
# -----
opera_managed: false
# Supported values in prefered order (due to GUI oriented usage):
# * flatpak   # <- Forced for non-Ubuntu-like
# * snap
opera_install_method: flatpak

# ====================
#       PHPSTORM
# ====================
# PHP IDE for Professional Development
#   https://www.jetbrains.com/phpstorm/
# -----
phpstorm_managed: false
# Supported values in prefered order (due to available CLI interface):
# * snap
# * flatpak   # <- Forced for non-Ubuntu-like
phpstorm_install_method: snap

# =================
#       PINTA
# =================
# FOS painting and image editing program designed for simplicity and power.
#   https://www.pinta-project.com/
# -----
pinta_managed: false
# Supported values in prefered order (due to GUI oriented usage):
# * flatpak   # <- Forced for non-Ubuntu-like
# * snap
pinta_install_method: flatpak

# ===================
#       POSTMAN
# ===================
# Platform for building and using APIs
#   https://www.postman.com/
# -----
postman_managed: false
# Supported values in prefered order (due to GUI oriented usage):
# * flatpak   # <- Forced for non-Ubuntu-like
# * snap
postman_install_method: flatpak

# ===================
#       SUBLIME
# ===================
# Text Editing, Done Right.
#   https://www.sublimetext.com/
# -----
sublime_managed: false
sublime_merge: false    # <- Install sublime-merge tool
# Supported values in prefered order (due to available CLI interface):
# * pm    # <- Forced for non-Ubuntu-like
# * snap
sublime_install_method: pm

# =================
#       TEAMS
# =================
# teams_users:  # <- Existing users to have teams autostarted
#   - "{{ ansible_user_id }}"
teams_managed: false
# Supported values in prefered order (due to GUI oriented usage):
# * flatpak   # <- Forced for non-Ubuntu-like
# * snap
teams_install_method: flatpak
teams_users:

# ======================
#       TERMINATOR
# ======================
terminator_managed: false

# =================
#       VIBER
# =================
# viber_users:  # <- Existing users to have viber autostarted
#   - "{{ ansible_user_id }}"
viber_managed: false
viber_users:

# ===============
#       VLC
# ===============
vlc_managed: false
# Supported values in prefered order (due to GUI oriented usage):
# * flatpak   # <- Forced for non-Ubuntu-like
# * snap
vlc_install_method: flatpak

# ==================
#       VSCODE
# ==================
# vscode_extensions:  # <- Per user extensions
#   - owner: "{{ ansible_user_id }}"
#     extensions:
#       - editorconfig.editorconfig
#       - mads-hartmann.bash-ide-vscode
#       - timonwong.shellcheck
#       - foxundermoon.shell-format
#       - redhat.ansible
# -----
vscode_managed: false
# Supported values in prefered order (due to available CLI interface):
# * snap
# * flatpak   # <- Forced for non-Ubuntu-like
vscode_install_method: snap
vscode_extensions:

# ===================
#       WHATSIE
# ===================
# Feature rich WhatsApp Client for Desktop Linux.
#   https://github.com/keshavbhatt/whatsie
# -----
whatsie_managed: false
# Supported values in prefered order (due to GUI oriented usage):
# * flatpak   # <- Forced for non-Ubuntu-like
# * snap
whatsie_install_method: flatpak
