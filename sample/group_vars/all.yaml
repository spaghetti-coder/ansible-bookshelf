# *_managed vars denote whether ansible takes care of the application or not.
#   `X_managed: false` application will still fire if it is in `Y_managed: true`
#   application dependencies
#
# *_enabled vars denote whether the application is enabled or not. Unlike
#   X_managed it disables the application when `X_enabled: false`

###
### Server connection configuration
###
# Don't keep passwords in plain text, encrypt them. One option would be:
#   ansible-vault encrypt_string -J PASSWORD_PLACEHOLDER
ansible_user: ansible-guy   # <- Not required for ssh-key-based connection
ansible_password: changeme  # <- Not required for ssh-key-based connection
ansible_become_password: changeme

# All before this ROLES_CONF_TS4LE64m91 marker stays
# unchanged by sample-vars.sh script
#################### {{ ROLES_CONF_TS4LE64m91 }} ####################

###
### BASH
###
bash_managed: false
bash_completion: false

###
### CLI-DOWNLOADERS
###
# Installs: curl, wget
# -----
# cli_downloaders_pick:   # <- Only install packages, or empty to install all
#   - curl
cli_downloaders_managed: false
cli_downloaders_pick:

###
### DOCKER
###
# docker_users:   # <- Existing users to be added to docker group
#   - "{{ ansible_user | default(ansible_user_id) }}"
docker_managed: false
docker_users:

###
### EDITORS
###
# Installs: nano, neovim, vim
# -----
# editors_pick:   # <- Only install packages, or empty to install all
#   - vim
editors_managed: false
editors_pick:

###
### ENVAR
###
# Installs envar for bash
# -----
# envar_users:  # <- Existing users to have access to envar
#   - "{{ ansible_user | default(ansible_user_id) }}"
#   - root
envar_managed: false
envar_users:

###
### GIT
###
# git_extraconf:
#   - owner: "{{ ansible_user_id }}"    # <- Required, must be unique
#     template: gitconfig.extra.ini.j2  # <- Required. No full path for the ones defined in the role
#     # Optional variables, can be addressed in the template via 'conf' map
#     user_name: Foo            # <- 'conf.user_name' in the template
#     user_email: foo@bar.baz
#   - owner: another-user
#     template: "{{ playbook_dir }}/resources/git/extra.ini.j2" # <- Full path for ones out of the role directory
#     # ...
git_managed: false
git_extraconf:

###
### PS1-GIT
###
# Installs fancy PS1 with git PS1 suffix support. Loaded with envar.
# Doesn't require git
# -----
# ps1_git_users:  # <- Existing users to have this PS1
#   - "{{ ansible_user | default(ansible_user_id) }}"
#   - root
ps1_git_managed: false
ps1_git_users:

###
### NGINX-PROXY-MANAGER
###
# Versions:
# * https://hub.docker.com/r/jc21/nginx-proxy-manager/tags
# -----
# # Optional path to extra configuration .env.j2 file
# nginx_proxy_manager_extra_envfile: "{{ playbook_dir }}/resources/npm/extra.env.j2"
nginx_proxy_manager_managed: false
nginx_proxy_manager_enabled: false
nginx_proxy_manager_version: latest
nginx_proxy_manager_owner: "{{ ansible_user | default(ansible_user_id) }}"
nginx_proxy_manager_conf_dir: ~/conf/nginx-proxy-manager
# nginx_proxy_manager_compose_dir: ~/docker/nginx-proxy-manager # <- Better leave automanaged, or uncomment and edit
nginx_proxy_manager_service_name: nginx-proxy-manager
nginx_proxy_manager_hostname: "{{ nginx_proxy_manager_service_name }}"
nginx_proxy_manager_vhost: "{{ nginx_proxy_manager_service_name }}.domain.local"
nginx_proxy_manager_extra_envfile:

###
### NGINX-PROXY
###
# Versions:
# * https://hub.docker.com/r/jwilder/nginx-proxy/tags?name=alpine
# Exposes:
# * nginx_proxy_net - proxy network name
# -----
nginx_proxy_managed: false
nginx_proxy_enabled: false
nginx_proxy_version: alpine
nginx_proxy_owner: "{{ ansible_user | default(ansible_user_id) }}"
# nginx_proxy_compose_dir: ~/docker/nginx-proxy # <- Better leave automanaged, or uncomment and edit
nginx_proxy_service_name: nginx-proxy
nginx_proxy_hostname: "{{ nginx_proxy_service_name }}"
nginx_proxy_http_port: 80
